#####################################################
## Author : ashish behl
## Creation date: 02.02.2018
## Changes: Initial version
##
## usage: cmake <cmake_dir>
## optional parameters:
## a. -ARCH=i686 (for 32 bit cross compilation)
#####################################################

CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)

PROJECT ("altermime")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -g -I. -O2")

EXECUTE_PROCESS(COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE ARCHITECTURE)

if (NOT DEFINED ARCH)
  SET (ARCH "${ARCHITECTURE}")
ENDIF(NOT DEFINED ARCH)

MESSAGE(STATUS "ARCH set to ${ARCH}")

IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
  IF (NOT ARCH MATCHES "x86_64")
    MESSAGE(STATUS "Cross compilation requested")
    SET(32BIT_COMPILE 1)
    SET(CPACK_RPM_PACKAGE_ARCHITECTURE  i686)
    SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE   i386)
  ENDIF (NOT ARCH MATCHES "x86_64")
ELSE (CMAKE_SIZEOF_VOID_P MATCHES "8")
  SET(32BIT_COMPILE 1)
  MESSAGE(STATUS "compilation requested on 32 bit machine..")
  SET(CPACK_RPM_PACKAGE_ARCHITECTURE  "${ARCHITECTURE}")
  SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE   i386)
ENDIF (CMAKE_SIZEOF_VOID_P MATCHES "8")

IF(DEFINED 32BIT_COMPILE)
  MESSAGE(STATUS "32bit compilation")
  ADD_DEFINITIONS( -m32)
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
  SET(CMAKE_SHARED_LINKER_FLAGS " -m32")
  SET_PROPERTY(GLOBAL PROPERTY COMPILE_FLAGS "-m32" )
  SET_PROPERTY(GLOBAL PROPERTY LINK_FLAGS "-m32")
  SET_PROPERTY(GLOBAL PROPERTY LDFLAGS "-m32")
  SET(CMAKE_SHARED_LINKER_FLAGS   "-m32")
  SET(LF              "-m32")
ENDIF(DEFINED 32BIT_COMPILE)

ADD_DEFINITIONS(-DALTERMIME_PRETEXT)
FILE(GLOB COMPILE_SRCS   ${CMAKE_CURRENT_SOURCE_DIR}/*.c)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

ADD_EXECUTABLE(altermime ${COMPILE_SRCS})

INSTALL( PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/altermime
         DESTINATION /usr/bin
       )

## update architecture for package name. 
SET (PKG_ARCHITECTURE "${ARCHITECTURE}")
IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
  IF (NOT ARCH MATCHES "x86_64")
    IF (DPKG)
      SET(PKG_ARCHITECTURE "${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
    ELSE(DPKG)
      SET(PKG_ARCHITECTURE "${CPACK_RPM_PACKAGE_ARCHITECTURE}")
    ENDIF(DPKG)
  ENDIF (NOT ARCH MATCHES "x86_64")
ENDIF (CMAKE_SIZEOF_VOID_P MATCHES "8")

FIND_PROGRAM(DPKG NAMES dpkg)
FIND_PROGRAM(ZYPPER NAMES zypper)
FIND_PROGRAM(YUM NAMES yum)
IF (DPKG)
    SET (CPACK_GENERATOR "DEB")
ELSE (DPKG)
    IF (ZYPPER)
        SET (CPACK_GENERATOR "RPM")
    ELSEIF(YUM)
        SET (CPACK_GENERATOR "RPM")
    ELSE ()
        SET (CPACK_GENERATOR "")
    ENDIF ()
ENDIF(DPKG)

set(CPACK_PACKAGE_NAME                                  "altermime")
set(CPACK_PACKAGE_CONTACT                               "Altermime")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY                   "Provides a binary to alter the MIME contents in a mail.")
set(CPACK_PACKAGE_VENDOR                                "Open source")
set(CPACK_PACKAGE_VERSION_MAJOR                         0)
set(CPACK_PACKAGE_VERSION_MINOR                         3)
set(CPACK_PACKAGE_VERSION_PATCH                         11)
set(CPACK_PACKAGE_RELEASE                               "1")
set(CPACK_PACKAGE_FILE_NAME                             ${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}_${PKG_ARCHITECTURE})
set(CPACK_DEBIAN_PACKAGE_SECTION                        "main")

SET(CPACK_DEBIAN_PACKAGE_REPLACES                    "altermime (<= 0.3.10)")

SET(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION    "/usr/bin")

include(CPack)
